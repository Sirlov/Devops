services:
  bot_image:
    container_name: "bot_image"
    image: "${REP_HOST}:5000/bot_image:latest"
    environment:
      TOKEN: ${TOKEN}
      RM_HOST: ${RM_HOST}
      RM_PORT: ${RM_PORT}
      RM_USER: ${RM_USER}
      RM_PASSWORD: ${RM_PASSWORD}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
    restart: unless-stopped

  db_image:
    image: "${REP_HOST}/db_image:latest"
    container_name: "${DB_HOST}"
    restart: always
    ports:
      - ${DB_PORT}:5432
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c log_replication_commands=on
      -c log_statement=all
      -c wal_log_hints=on
    healthcheck:
      test: 'pg_isready -U ${DB_USER} --dbname=${DB_DATABASE}'
      interval: 10s
      timeout: 5s
      retries: 5

  db_repl_image:
    image: "${REP_HOST}/db_repl_image:latest"
    container_name: "${DB_REPL_HOST}"
    restart: always
    ports:
      - ${DB_REPL_PORT}:5432
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
      PGHOST: db_image  
    command: |
      bash -c "
      PGUSER=${DB_USER} PGPASSWORD=${DB_PASSWORD} psql -c \"CREATE USER ${DB_REPL_USER} WITH REPLICATION ENCRYPTED PASSWORD '${DB_REPL_PASSWORD}';\";
      PGUSER=${DB_USER} PGPASSWORD=${DB_PASSWORD} psql -c \"SELECT pg_create_physical_replication_slot('replication_slot');\";
      rm -rf /var/lib/postgresql/data/* && pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot;
      chown -R postgres:postgres /var/lib/postgresql/data && chmod 0700 /var/lib/postgresql/data;
      su postgres -c postgres;
      "
    depends_on:
      - db_image

